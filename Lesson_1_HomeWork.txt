2. Определить сложность следующих алгоритмов:
-. Поиск элемента массива с известным индексом (сложность O(1), т.к. мы можем сразу обратиться к нужному элементу)
-. Дублирование одномерного массива через foreach (сложность будет О(n) т.к. надо будет скопировать каждый элемент массива)
-. Удаление элемента массива с известным индексом без сдвига (сложность О(1) т.к. опять же можем по индексу сразу удалить нужный элемент, не выполняя поиск)
-. Удаление элемента массива с неизвестным индексом без сдвига (сложность будет O (log(n)) т.к. можно выполнить быстрый поиск не выполняя другие операции если массив отсортирован. Если нет, то сложность будет O(n))
-. Удаление элемента массива с неизвестным индексом со сдвигом (сложность данной операции будет O(n), т.к. в результате надо будет всё равно перебрать все элементы для их сдвига)
.

3. Определить сложность следующих алгоритмов. Сколько произойдет итераций?
a)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j *= 2) {
                arrayList.add(i * j);
            }
        }

	Сложность данного алгоритма будет O(n*log(n)), будет 14000 итераций.
b)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i += 2) {
            for (int j = i; j < n; j++) {
                arrayList.add(i * j);
            }
        }
	Сложность данного алгоритма O(n^2) т.к. в данном случае сложности циклов перемножаются, итераций будет 25005000.
с)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < n; j++) {
                arrayList.add(i * j);
                n--;
            }
        }
	Сложность данного алгоритма O(n) т.к. есть условие уменьшающее количество итераций (n--), количество итераций 9991.
d)
```

    factorial(BigInteger.valueOf(10000))

public static BigInteger factorial(BigInteger n) {
    if (n.equals(BigInteger.ONE)) {
        return n;
    }
    return n.multiply(factorial(n.subtract(BigInteger.valueOf(1))));
}
Сложность данного алгоритма O(n), т.к. нужно перебрать все элементы, количество итераций в данном случае (10000)!.

e)
fib(BigInteger.valueOf(50));

public static BigInteger fib(BigInteger n) {
    if (n.equals(BigInteger.ONE)) {
        return BigInteger.ZERO;
    }
    if (n.equals(BigInteger.TWO)) {
        return BigInteger.ONE;
    }
    return fib(n.subtract(BigInteger.ONE)).add(fib(n.subtract(BigInteger.TWO)));
}
Сложность данного алгоритма O(2^n), количество итераций равняется числу Фибоначи от 50.
